#!/usr/bin/env python3
###################################################################################################
# Copyright (C) 2021 Maxim Integrated Products, Inc. All Rights Reserved.
#
# Maxim Integrated Products, Inc. Default Copyright Notice:
# https://www.maximintegrated.com/en/aboutus/legal/copyrights.html
###################################################################################################
"""
Test the conv2d operator.
"""
import os
import sys

import numpy as np
import torch

# Allow test to run outside of pytest
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from izer import compute, state  # noqa: E402 pylint: disable=wrong-import-position


def convolve(dilation, data, weight, expected):
    """Convolve data"""
    print('Input:\n', data)

    t = torch.nn.functional.conv2d(
        torch.as_tensor(data, dtype=torch.float).unsqueeze(0),  # Add batch dimension
        torch.as_tensor(weight, dtype=torch.float),
        bias=None,
        stride=1,
        padding=1,  # Keep data dimensions
        groups=1,
        dilation=dilation,
    ).int().squeeze().numpy()

    print(t.shape)

    output = compute.conv2d(
        data,
        weight,
        None,
        data.shape,
        expected.shape,
        kernel_size=[3, 3],
        stride=[1, 1],
        pad=[1, 1],
        dilation=[dilation, dilation],
        fractional_stride=[1, 1],
        output_pad=[0, 0],
        groups=1,
    )

    print("PYTORCH OK" if np.array_equal(output, t) else "*** FAILURE ***")
    assert np.array_equal(output, t)

    print('Output before division:\n', output)
    output += 64
    output //= 128
    print('Output:\n', output)

    print('Expected:\n', expected)
    print("SUCCESS" if np.array_equal(output, expected) else "*** FAILURE ***")
    assert np.array_equal(output, expected)


def test_conv2d():
    """Main program to test compute.conv2d."""
    state.debug = True

    # 3x4x4 (CHW)
    d0 = np.array(
        [[[-41, -98, 16, 73],
          [49, 73, 28, 25],
          [35, 104, -27, -107],
          [111, 42, -46, -10]],
         [[-114, -28, -31, 21],
          [103, -76, 27, 78],
          [-51, -74, 57, -76],
          [-126, -71, 17, -40]],
         [[-98, 31, 109, 33],
          [-59, 86, -51, 69],
          [1, 85, -95, 121],
          [-93, 8, -103, 73]]],
        dtype=np.int64,
    )

    # 5x3x3x3
    w0 = np.array(
        [[[[-54, -64, 14],
           [52, -44, -60],
           [-90, -52, 42]],
          [[1, -77, 58],
           [25, 108, -18],
           [-30, 113, 37]],
          [[33, 90, 123],
           [-82, -17, 17],
           [55, -29, 102]]],
         [[[-104, -48, 34],
           [-41, 8, 11],
           [33, 96, 79]],
          [[11, 111, -65],
           [-82, 121, 94],
           [-49, -67, -29]],
          [[-81, 96, -89],
           [-109, -109, 98],
           [-46, 41, 99]]],
         [[[-67, 51, 43],
           [-7, -12, 118],
           [102, -68, 54]],
          [[102, -110, -127],
           [49, 14, 36],
           [-26, -23, -7]],
          [[-76, -56, 19],
           [49, -79, -79],
           [112, 52, 1]]],
         [[[62, -23, 31],
           [15, -50, -46],
           [72, 36, -53]],
          [[-62, -100, 31],
           [24, -108, 81],
           [-72, 85, 30]],
          [[-11, 62, 44],
           [70, 78, -108],
           [-45, -50, 87]]],
         [[[-85, -107, 3],
           [-90, -112, 47],
           [-74, -101, 71]],
          [[86, 111, -18],
           [6, 72, -99],
           [54, -76, -114]],
          [[110, 105, 56],
           [-81, -9, 69],
           [121, -69, -10]]]],
        dtype=np.int64,
    )

    # 5x2x2
    e0 = np.array(
        [[[-152, 66],
          [104, 152]],
         [[102, 73],
          [-87, 288]],
         [[-74, 58],
          [-285, 20]],
         [[76, 133],
          [50, 18]],
         [[-98, -122],
          [42, -50]]],
        dtype=np.int64,
    )

    convolve(2, d0, w0, e0)

    # 2x8x8
    d1 = np.array(
        [[[106, -99, 45, -57, 109, 7, -83, 125],
          [-82, 98, 56, -14, 12, -56, -54, -38],
          [52, 116, -13, 101, 93, 47, -123, 20],
          [60, -97, 99, -29, 114, -90, 9, 80],
          [-77, 30, 89, -53, -93, 67, 95, 26],
          [16, -45, 117, 108, -9, -58, 92, -51],
          [50, -32, -49, 100, -74, -10, 10, -122],
          [6, -101, -31, -58, 63, -98, -50, 8]],
         [[-71, 60, -17, 114, -40, 17, 32, -43],
          [-75, -116, -112, 108, 49, -76, -70, -95],
          [-38, 99, -121, -74, -96, 69, -105, -112],
          [55, 120, -47, -48, -116, -102, 76, 118],
          [-118, 94, 35, -66, -69, 110, 6, -54],
          [-100, -2, 60, 68, -97, -30, 34, 13],
          [121, -91, 60, 32, 114, -51, -104, 72],
          [116, -78, 7, 57, 84, -121, -90, 48]]],
        dtype=np.int64,
    )

    # 3x2x3x3
    w1 = np.array(
        [[[[-54, -64, 14],
           [52, -44, -60],
           [-90, -52, 42]],
          [[33, 90, 123],
           [-82, -17, 17],
           [55, -29, 102]]],
         [[[-104, -48, 34],
           [-41, 8, 11],
           [33, 96, 79]],
          [[-81, 96, -89],
           [-109, -109, 98],
           [-46, 41, 99]]],
         [[[-67, 51, 43],
           [-7, -12, 118],
           [102, -68, 54]],
          [[110, 105, 56],
           [-81, -9, 69],
           [121, -69, -10]]]],
        dtype=np.int64,
    )

    # 3x6x6
    e1 = np.array(
        [[[-33, -92, 152, 54, 139, -150],
          [-19, -240, 294, 54, -5, 159],
          [105, -346, -210, -18, -68, 12],
          [37, -59, -201, -258, -202, 17],
          [143, -35, -176, -240, 319, 26],
          [-38, -93, 109, -81, 97, -115]],
         [[97, 263, -328, 133, -52, 113],
          [-168, 28, 184, -55, 8, 200],
          [-265, -54, 33, 319, 120, 38],
          [9, 22, -168, -99, -2, -44],
          [120, -41, -216, -240, -220, 16],
          [200, 61, -145, -306, 215, 104]],
         [[23, 222, 17, 10, -84, -86],
          [-8, -301, 387, 94, -26, -217],
          [0, -240, -476, 185, 321, -148],
          [141, -122, -63, -141, 28, -127],
          [236, 138, -239, -150, -24, 162],
          [161, -144, 71, -159, -22, -30]]],
        dtype=np.int64,
    )

    convolve(2, d1, w1, e1)

    # 2x8x8
    d2 = d1

    # 3x2x3x3
    w2 = w1

    # 3x4x4
    e2 = np.array(
        [[[-96, 8, -10, 21],
          [-54, -32, -210, 176],
          [-356, 21, -131, -10],
          [-32, -263, -218, 32]],
         [[207, 220, -188, 7],
          [-142, 34, 153, 16],
          [-176, 260, 124, -281],
          [-193, -8, -77, 55]],
         [[-26, -293, -116, 265],
          [-137, 54, 11, 69],
          [-31, 292, -446, -152],
          [-143, -17, -88, -59]]],
        dtype=np.int64,
    )

    convolve(3, d2, w2, e2)

    # 2x8x8
    d3 = d1

    # 3x2x3x3
    w3 = w1

    # 3x2x2
    e3 = np.array(
        [[[46, -34],
          [89, -60]],
         [[153, 74],
          [184, 66]],
         [[143, -5],
          [98, -13]]],
        dtype=np.int64,
    )

    convolve(4, d3, w3, e3)


if __name__ == '__main__':
    test_conv2d()
