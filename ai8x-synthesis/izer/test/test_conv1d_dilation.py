#!/usr/bin/env python3
###################################################################################################
# Copyright (C) 2021 Maxim Integrated Products, Inc. All Rights Reserved.
#
# Maxim Integrated Products, Inc. Default Copyright Notice:
# https://www.maximintegrated.com/en/aboutus/legal/copyrights.html
###################################################################################################
"""
Test the conv1d operator.
"""
import os
import sys

import numpy as np
import torch

# Allow test to run outside of pytest
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from izer import compute, state  # noqa: E402 pylint: disable=wrong-import-position


def convolve(dilation, data, weight, expected):
    """Convolve data"""
    print('Input:\n', data)

    t = torch.nn.functional.conv1d(
        torch.as_tensor(data, dtype=torch.float).unsqueeze(0),  # Add batch dimension
        torch.as_tensor(weight, dtype=torch.float),
        bias=None,
        stride=1,
        padding=1,  # Keep data dimensions
        groups=1,
        dilation=dilation,
    ).int().squeeze().numpy()

    print(t.shape)

    output = compute.conv1d(
        data,
        weight,
        None,
        data.shape,
        expected.shape,
        kernel_size=9,
        stride=1,
        pad=1,
        dilation=dilation,
        fractional_stride=1,
        output_pad=0,
        groups=1,
    )

    print("PYTORCH OK" if np.array_equal(output, t) else "*** FAILURE ***")
    assert np.array_equal(output, t)

    print('Output before division:\n', output)
    output += 64
    output //= 128
    print('Output:\n', output)

    print('Expected:\n', expected)
    print("SUCCESS" if np.array_equal(output, expected) else "*** FAILURE ***")
    assert np.array_equal(output, expected)


def test_conv1d():
    """Main program to test compute.conv1d."""
    state.debug = True

    # 3x16 (CL)
    d0 = np.array(
        [[-41, -98, 16, 73,
          49, 73, 28, 25,
          35, 104, -27, -107,
          111, 42, -46, -10],
         [-114, -28, -31, 21,
          103, -76, 27, 78,
          -51, -74, 57, -76,
          -126, -71, 17, -40],
         [-98, 31, 109, 33,
          -59, 86, -51, 69,
          1, 85, -95, 121,
          -93, 8, -103, 73]],
        dtype=np.int64,
    )

    # 5x3x9
    w0 = np.array(
        [[[-54, -64, 14,
           52, -44, -60,
           -90, -52, 42],
          [1, -77, 58,
           25, 108, -18,
           -30, 113, 37],
          [33, 90, 123,
           -82, -17, 17,
           55, -29, 102]],
         [[-104, -48, 34,
           -41, 8, 11,
           33, 96, 79],
          [11, 111, -65,
           -82, 121, 94,
           -49, -67, -29],
          [-81, 96, -89,
           -109, -109, 98,
           -46, 41, 99]],
         [[-67, 51, 43,
           -7, -12, 118,
           102, -68, 54],
          [102, -110, -127,
           49, 14, 36,
           -26, -23, -7],
          [-76, -56, 19,
           49, -79, -79,
           112, 52, 1]],
         [[62, -23, 31,
           15, -50, -46,
           72, 36, -53],
          [-62, -100, 31,
           24, -108, 81,
           -72, 85, 30],
          [-11, 62, 44,
           70, 78, -108,
           -45, -50, 87]],
         [[-85, -107, 3,
           -90, -112, 47,
           -74, -101, 71],
          [86, 111, -18,
           6, 72, -99,
           54, -76, -114],
          [110, 105, 56,
           -81, -9, 69,
           121, -69, -10]]],
        dtype=np.int64,
    )

    # 5x4
    e0 = np.array(
        [[224, 28],
         [98, 107],
         [-6, -79],
         [-114, 475],
         [319, -398]],
        dtype=np.int64,
    )

    convolve(2, d0, w0, e0)

    # 2x64
    d1 = np.array(
        [[106, -99, 45, -57, 109, 7, -83, 125,
          -82, 98, 56, -14, 12, -56, -54, -38,
          52, 116, -13, 101, 93, 47, -123, 20,
          60, -97, 99, -29, 114, -90, 9, 80,
          -77, 30, 89, -53, -93, 67, 95, 26,
          16, -45, 117, 108, -9, -58, 92, -51,
          50, -32, -49, 100, -74, -10, 10, -122,
          6, -101, -31, -58, 63, -98, -50, 8],
         [-71, 60, -17, 114, -40, 17, 32, -43,
          -75, -116, -112, 108, 49, -76, -70, -95,
          -38, 99, -121, -74, -96, 69, -105, -112,
          55, 120, -47, -48, -116, -102, 76, 118,
          -118, 94, 35, -66, -69, 110, 6, -54,
          -100, -2, 60, 68, -97, -30, 34, 13,
          121, -91, 60, 32, 114, -51, -104, 72,
          116, -78, 7, 57, 84, -121, -90, 48]],
        dtype=np.int64,
    )

    # 3x2x9
    w1 = np.array(
        [[[-54, -64, 14,
           52, -44, -60,
           -90, -52, 42],
          [33, 90, 123,
           -82, -17, 17,
           55, -29, 102]],
         [[-104, -48, 34,
           -41, 8, 11,
           33, 96, 79],
          [-81, 96, -89,
           -109, -109, 98,
           -46, 41, 99]],
         [[-67, 51, 43,
           -7, -12, 118,
           102, -68, 54],
          [110, 105, 56,
           -81, -9, 69,
           121, -69, -10]]],
        dtype=np.int64,
    )

    # 3x36
    e1 = np.array(
        [[96, -144, 425, -178, 46, -40, -225,
          -281, -302, -12, -55, -88, -239, -52,
          135, -77, 167, -526, 95, -220, -322,
          -91, 221, 169, -47, -311, -120, -37,
          124, -335, 41, -7, -68, -66, 87,
          -67, 94, -40, -116, -47, 64, 85,
          -148, -138, 193, 156, -23, -106, 290, 279],
         [-271, -112, 424, 23, 107, -38, 38,
          22, 6, 9, 85, 238, -76, 107,
          -350, 457, 357, 9, -142, -117, -89,
          93, -14, 127, 371, 24, -284, -70,
          115, 170, 116, -48, -193, 497, -203,
          -25, 139, 184, -186, -141, -62, 7,
          -8, -226, -277, -184, 1, -11, -215, -243],
         [202, 42, 245, -62, -50, -58, 51,
          -214, 71, 29, 80, -278, -143, -7,
          -9, 94, 61, -133, -201, -9, -194,
          -424, 352, 212, -130, -106, 9, 11,
          37, -266, 11, 222, 162, -76, 173,
          -101, 70, 168, -254, 115, 20, -3,
          135, -302, -9, 120, -337, 5, 27, 369]],
        dtype=np.int64,
    )

    convolve(2, d1, w1, e1)

    # 2x64
    d2 = d1

    # 3x2x9
    w2 = w1

    # 3x16
    e2 = np.array(
        [[-134, 162, 76, -279, -82, -296, -197, 82, 35, -184, -49, -35, 181, -296,
          -83, 91, 34, -585, -155, 187, 177, -226, -222, -93, -150, 104, -164, -180,
          139, -19, -56, -100, 81, 193, -146, 18, 43, 55, 87, -166, -157, 218],
         [-141, 149, 108, 132, 70, -27, -216, 168, -26, -80, 313, 476, -172, -256,
          248, 285, -142, 89, -134, 281, -99, 16, -170, 569, 150, -155, -417, 51,
          401, 72, -83, -27, -157, 268, -160, -294, 222, 79, -358, -255, -81, -31],
         [177, -248, 325, 99, 37, -158, -124, 332, -314, 14, -116, -264, 150, -244,
          200, -59, 112, -80, -331, 47, 164, -92, -255, -87, -5, 157, 179, -401,
          155, 214, -315, 132, 154, -86, 155, -15, -100, 165, -22, -51, -368, 134]],
        dtype=np.int64,
    )

    convolve(3, d2, w2, e2)

    # 2x64
    d3 = d1

    # 3x2x9
    w3 = w1

    # 3x4
    e3 = np.array(
        [[55, -480, 189, -27, -70, -172, -93, -43, 24, -2, -17, -198, 100, -170,
          -10, -236, -332, 195, 74, -266, -206, -106, -24, -174, 54, -150, 38, 62,
          1, 40, 101, -113, 69, -18],
         [262, -252, 145, 366, -82, -104, -3, 254, 48, -20, -318, 510, 321, -154,
          58, 234, 88, 76, -259, 139, -158, 369, -196, -38, 199, -8, -364, -117,
          90, 289, -135, -193, -239, 295],
         [66, -88, 360, -165, 9, -4, -415, 167, 175, 41, -338, -50, 173, -251,
          321, -81, -340, -111, 304, -131, -96, -252, -107, 227, -53, 8, -168, 153,
          141, -164, 60, -1, 4, -116]],
        dtype=np.int64,
    )

    convolve(4, d3, w3, e3)


if __name__ == '__main__':
    test_conv1d()
